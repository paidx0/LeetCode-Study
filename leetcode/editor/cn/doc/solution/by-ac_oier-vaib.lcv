## 双向链表

一道手写链表裸题（啊嘿，$9$ 月活动的同学表示很棒 🤣

由于需要涉及部分 `index` 相关操作，因此我们可以实现一个「双向链表」，同时使用变量 `sz` 记录下当前链表的总长度，这样在涉及 `index` 操作时，可从较近的一边出发遍历，剩下的则是常规的链表节点操作。

> 一些细节：所有的链表题目我们都可以引入前后哨兵来简化边界处理；同时能写双链表自然能写单链表，因此如果你没有顺利写出双链表的话，在看了题解写完双链表后，再手写一遍单链表作为练习。

代码：

* []

```Java
class MyLinkedList {
    class Node {
        Node prev, next;
        int val;
        Node (int _val) {
            val = _val;
        }
    }
    Node he = new Node(-1), ta = new Node(-1);
    int sz = 0;
    public MyLinkedList() {
        he.next = ta; ta.prev = he;
    }
    public int get(int index) {
        Node node = getNode(index);
        return node == null ? -1 : node.val;
    }
    public void addAtHead(int val) {
        Node node = new Node(val);        
        node.next = he.next; node.prev = he;
        he.next.prev = node; he.next = node;
        sz++;
    }
    public void addAtTail(int val) {
        Node node = new Node(val);
        node.prev = ta.prev; node.next = ta;
        ta.prev.next = node; ta.prev = node;
        sz++;
    }
    public void addAtIndex(int index, int val) {
        if (index > sz) return ;
        if (index <= 0) {
            addAtHead(val); 
        } else if (index == sz) {
            addAtTail(val);
        } else {
            Node node = new Node(val), cur = getNode(index);
            node.next = cur; node.prev = cur.prev;
            cur.prev.next = node; cur.prev = node;
            sz++;
        }
    }
    public void deleteAtIndex(int index) {
        Node cur = getNode(index);
        if (cur == null) return ;
        cur.next.prev = cur.prev;
        cur.prev.next = cur.next;
        sz--;
    }
    Node getNode(int index) {
        boolean isLeft = index < sz / 2;
        if (!isLeft) index = sz - index - 1;
        for (Node cur = isLeft ? he.next : ta.prev; cur != ta && cur != he; cur = isLeft ? cur.next : cur.prev) {
            if (index-- == 0) return cur;
        }
        return null;
    }
}
```

* []

```TypeScript
class TNode {
    prev: TNode
    next: TNode
    val: number
    constructor(_val: number) {
        this.val = _val
    }
}
class MyLinkedList {
    he = new TNode(-1)
    ta = new TNode(-1)
    sz = 0
    constructor() {
        this.he.next = this.ta; this.ta.prev = this.he    
    }
    get(index: number): number {
        const node = this.getNode(index)
        return node == null ? -1 : node.val
    }
    addAtHead(val: number): void {
        const node = new TNode(val)
        node.next = this.he.next; node.prev = this.he
        this.he.next.prev = node; this.he.next = node
        this.sz++
    }
    addAtTail(val: number): void {
        const node = new TNode(val)
        node.prev = this.ta.prev; node.next = this.ta
        this.ta.prev.next = node; this.ta.prev = node
        this.sz++
    }
    addAtIndex(index: number, val: number): void {
        if (index > this.sz) return 
        if (index <= 0) {
            this.addAtHead(val)
        } else if (index == this.sz) {
            this.addAtTail(val)
        } else {
            const node = new TNode(val), cur = this.getNode(index)
            node.next = cur; node.prev = cur.prev
            cur.prev.next = node; cur.prev = node
            this.sz++
        }
    }
    deleteAtIndex(index: number): void {
        const cur = this.getNode(index)
        if (cur == null) return 
        cur.prev.next = cur.next
        cur.next.prev = cur.prev
        this.sz--
    }
    getNode(index: number): TNode | null {
        const isLeft = index < this.sz / 2
        if (!isLeft) index = this.sz - index - 1
        for (let cur = isLeft ? this.he.next : this.ta.prev; cur != this.ta && cur != this.he; cur = isLeft ? cur.next : cur.prev) {
            if (index-- == 0) return cur
        }
        return null
    }
}
```

* []

```Python
class Node:
    def __init__(self, _val):
        self.val = _val
        self.prev = None
        self.next = None

class MyLinkedList:
    def __init__(self):
        self.he = Node(-1)
        self.ta = Node(-1)
        self.he.next = self.ta
        self.ta.prev = self.he
        self.sz = 0

    def get(self, index: int) -> int:
        node = self.getNode(index)
        return node.val if node else -1

    def addAtHead(self, val: int) -> None:
        node = Node(val)
        node.next = self.he.next
        node.prev = self.he
        self.he.next.prev = node
        self.he.next = node
        self.sz += 1

    def addAtTail(self, val: int) -> None:
        node = Node(val)
        node.prev = self.ta.prev
        node.next = self.ta
        self.ta.prev.next = node
        self.ta.prev = node
        self.sz += 1

    def addAtIndex(self, index: int, val: int) -> None:
        if index > self.sz:
            return 
        if index <= 0:
            self.addAtHead(val)
        elif index == self.sz:
            self.addAtTail(val)
        else:
            node, cur = Node(val), self.getNode(index)
            node.next = cur
            node.prev = cur.prev
            cur.prev.next = node
            cur.prev = node
            self.sz += 1

    def deleteAtIndex(self, index: int) -> None:
        node = self.getNode(index)
        if node:
            node.prev.next = node.next
            node.next.prev = node.prev
            self.sz -= 1

    def getNode(self, index: int) -> Node | None:
        isLeft = index < self.sz / 2
        if not isLeft:
            index = self.sz - index - 1
        cur = self.he.next if isLeft else self.ta.prev
        while cur != self.he and cur != self.ta:
            if index == 0:
                return cur
            index -= 1
            cur = cur.next if isLeft else cur.prev
        return None
```

* 时间复杂度：涉及 `index` 的相关操作复杂度为 $O(index)$；其余操作均为 $O(1)$
* 空间复杂度：$O(n)$

---

## 最后

今天是连续更新每日一题题解的第 $600$ 天 🎉 🎉 ~

特殊的日子，开个赞赏拍个全家福，仍然是「**学生免费，非学生是否赞赏都能看**」的原则。

另外需要强调：力扣「赞赏」行为的发生，必须基于「你十分喜欢该作者」&「你十分喜欢该平台」，两者缺一不可。

如果你确定满足上述所有条件的话，可以花 **最多一元（千万千万不要给多了，就给一元就行）** 留个头像 🤣，或者只需给我点个赞留个言，我也同样开心 ❤️

![image.png](https://pic.leetcode-cn.com/1663896309-pplJZk-image.png)

