### 思路

1. `root->val` 没用，父节点和子节点的距离是 $1$
2. 对树后序遍历 ，需要返回这个节点到其下方所有叶子节点的距离
3. 这样就可以将这个节点的左子树所有叶子节点和右子树所有叶子节点都凑个对
4. 然后将所有叶子节点不超过距离的弄到一起返回

### 图解

<![图片.png](https://pic.leetcode-cn.com/71419ee70d327d9f26bc08a0033a0bf2b6e251499a2e437131199a725ae6c7d1-%E5%9B%BE%E7%89%87.png),![图片.png](https://pic.leetcode-cn.com/a3f5bdf20ff90a485c68e728ee6161fe71c74925e971bbb62342ca8305f0a682-%E5%9B%BE%E7%89%87.png),![图片.png](https://pic.leetcode-cn.com/adc3a1600f975ea02ff1219b2217f788930251ca4897a093480f6bff356c7294-%E5%9B%BE%E7%89%87.png),![图片.png](https://pic.leetcode-cn.com/86b318a5c4710ab1ac5f8477a9b8b2bb7c45a17edc4a3a01474f0afb0b2447ae-%E5%9B%BE%E7%89%87.png)>

### 答题

* []

```C++
class Solution {
public:
    int countPairs(TreeNode* root, int distance) {
        int ans = 0;
        dfs(root, distance, ans);
        return ans;
    }

    vector<int> dfs(TreeNode* root, int distance, int& ans) {
        if (root == nullptr) return {};
        if (root->left == nullptr && root->right == nullptr) return { 0 };

        vector<int> ret;
        auto left = dfs(root->left, distance, ans);
        for (auto& e : left) {
            if (++e > distance) continue;
            ret.push_back(e);
        }
        auto right = dfs(root->right, distance, ans);
        for (auto& e : right) {
            if (++e > distance) continue;
            ret.push_back(e);
        }

        for (auto l : left) {
            for (auto r : right) {
                ans += (l + r <= distance);
            }
        }

        return ret;
    }
};
```

### 致谢

感谢您的观看，希望对您有帮助，欢迎热烈的交流！
